syntax = "proto3";

package pb;
import "transaction.proto";
import "contract.proto";
import "block.proto";
import "header.proto";

message Error {
    // TODO: Change to Error Codes Enum
    string message = 1;
}

message BlockRequest {
    oneof block_identifier {
        bytes block_id = 1;
        uint64 block_number = 2;
    }
}

message BlockReply {
    Block block = 1;
    Error error =2;
}

message BlockHeaderRequest {
    oneof block_identifier {
        bytes block_id = 1;
        uint64 block_number = 2;
    }
}

message BlockHeaderReply {
    BlockHeader block_header = 1;
    Error error = 2;
}

// Request for a ndoe to look up the status and value of a transaction.
message TransactionLookupRequest {
  // Unique transaction identifier.
  uint64 id = 1;

}

// Response to lookup request.
message TransactionLookupResponse {
  // Final transaction written to the blockchain.
  AcceptedTransaction transaction = 1;

  // Current status of the transaction.
  TransactionStatus status = 2;

  // Human readable information to help understand the transaction status.
  string status_info = 3;

  // Result of the transaction execution.
  bytes result = 4;
}

// Message sent to a node to submit a transaction.
message TransactionSubmitRequest {

  SignedTransaction transaction = 1;

}

// Response from a node from a transaction Request.
message TransactionSubmitResponse {

  // Final transaction written to the blockchain. (if successful)
  AcceptedTransaction transaction = 1;

  // Current status of the transaction.
  TransactionStatus status = 2;

  // Human readable information to help understand the transaction status.
  string status_info = 3;

  // Result of the transaction execution.
  bytes result = 4;

}

// Message used for deploying a contract.
message ContractDeployRequest {

  SignedContract contract = 1;

}

// Message used for replying to a contract deployment request.
message ContractDeployResponse {
  // Final contract stored to the blockchain. (if successful)
  AcceptedContract contract = 1;

  // Current status of the contract.
  ContractStatus status = 2;

  // Human readable information to help understand the contract status.
  string status_info = 3;
}


// gRPC methods that define the Mazzaroth API
service MazzarothRPC {
    rpc TransactionSubmit(TransactionSubmitRequest) returns (TransactionSubmitResponse) {}
    rpc TransactionLookup(TransactionLookupRequest) returns (TransactionLookupResponse) {}

    rpc GetBlock(BlockRequest) returns (BlockReply) {}
    rpc GetBlockByNumber(BlockRequest) returns (BlockReply){}
    rpc GetBlockHeader(BlockHeaderRequest) returns (BlockHeaderReply) {}
    rpc GetBlockHeaderByNumber(BlockHeaderRequest) returns (BlockHeaderReply){}

    rpc ContractDeploy(ContractDeployRequest) returns (ContractDeployResponse){}
}

