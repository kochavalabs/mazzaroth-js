// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Status of a transaction.
type TransactionStatus int32

const (
	// The transaction status is either not known or not set.
	TransactionStatus_TX_UNKNOWN TransactionStatus = 0
	// The transaction has been accepted by a node and is in the process of being
	// submitted to the blockchain.
	TransactionStatus_TX_ACCEPTED TransactionStatus = 1
	// This transaction was not accepted by the blockchain.
	TransactionStatus_TX_REJECTED TransactionStatus = 2
	// The transaction has succesfully been added to the blockchain.
	TransactionStatus_TX_CONFIRMED TransactionStatus = 3
	// This transaction was not found.
	TransactionStatus_TX_NOT_FOUND TransactionStatus = 4
)

var TransactionStatus_name = map[int32]string{
	0: "TX_UNKNOWN",
	1: "TX_ACCEPTED",
	2: "TX_REJECTED",
	3: "TX_CONFIRMED",
	4: "TX_NOT_FOUND",
}

var TransactionStatus_value = map[string]int32{
	"TX_UNKNOWN":   0,
	"TX_ACCEPTED":  1,
	"TX_REJECTED":  2,
	"TX_CONFIRMED": 3,
	"TX_NOT_FOUND": 4,
}

func (x TransactionStatus) String() string {
	return proto.EnumName(TransactionStatus_name, int32(x))
}

func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{0}
}

// Basic information needed to execute a transaction on the mazzaroth.
type Transaction struct {
	// Contract identifier, public key of the deployed contract object
	// formatted as hex.
	ContractId []byte `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// Channel identifier, can be the channel key or namespace.
	// namespace example: mazz://xchng.publisher
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Byte array representing the id of the sender, this also happens
	// to be the sender's account public key.
	SenderId []byte `protobuf:"bytes,3,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// Randomly generated nonce to avoid message replays.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Contract function to execute.
	Call string `protobuf:"bytes,5,opt,name=call,proto3" json:"call,omitempty"`
	// Arguments to the contract function. The serialization format is defined
	// by the contract itself.
	Input                [][]byte `protobuf:"bytes,6,rep,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{0}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetContractId() []byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *Transaction) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Transaction) GetSenderId() []byte {
	if m != nil {
		return m.SenderId
	}
	return nil
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetCall() string {
	if m != nil {
		return m.Call
	}
	return ""
}

func (m *Transaction) GetInput() [][]byte {
	if m != nil {
		return m.Input
	}
	return nil
}

// Transaction along with the signature of the serialized transaction bytes.
type SignedTransaction struct {
	// Raw transaction bytes serialized. Should be in the format of a Transaction message.
	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// Byte array signature of the Transaction bytes signed by the Transaction
	// sender's private key.
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedTransaction) Reset()         { *m = SignedTransaction{} }
func (m *SignedTransaction) String() string { return proto.CompactTextString(m) }
func (*SignedTransaction) ProtoMessage()    {}
func (*SignedTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{1}
}

func (m *SignedTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedTransaction.Unmarshal(m, b)
}
func (m *SignedTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedTransaction.Marshal(b, m, deterministic)
}
func (m *SignedTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedTransaction.Merge(m, src)
}
func (m *SignedTransaction) XXX_Size() int {
	return xxx_messageInfo_SignedTransaction.Size(m)
}
func (m *SignedTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_SignedTransaction proto.InternalMessageInfo

func (m *SignedTransaction) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *SignedTransaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// A transaction that a node has accepted, assigned an ID to, and is attempting
// to write to the blockchain.
type AcceptedTransaction struct {
	// Unique ID for each transaction.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// These are the raw bytes received from the original request to process a
	// transaction. Although nodes read and inspect transactions,  they  don't
	// reseralize them after assigning a transaction ID. This is to avoid
	// slight differences in serialization format from invalidating a signature.
	SignedTransaction    []byte   `protobuf:"bytes,2,opt,name=signed_transaction,json=signedTransaction,proto3" json:"signed_transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptedTransaction) Reset()         { *m = AcceptedTransaction{} }
func (m *AcceptedTransaction) String() string { return proto.CompactTextString(m) }
func (*AcceptedTransaction) ProtoMessage()    {}
func (*AcceptedTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{2}
}

func (m *AcceptedTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptedTransaction.Unmarshal(m, b)
}
func (m *AcceptedTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptedTransaction.Marshal(b, m, deterministic)
}
func (m *AcceptedTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedTransaction.Merge(m, src)
}
func (m *AcceptedTransaction) XXX_Size() int {
	return xxx_messageInfo_AcceptedTransaction.Size(m)
}
func (m *AcceptedTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedTransaction proto.InternalMessageInfo

func (m *AcceptedTransaction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AcceptedTransaction) GetSignedTransaction() []byte {
	if m != nil {
		return m.SignedTransaction
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.TransactionStatus", TransactionStatus_name, TransactionStatus_value)
	proto.RegisterType((*Transaction)(nil), "pb.Transaction")
	proto.RegisterType((*SignedTransaction)(nil), "pb.SignedTransaction")
	proto.RegisterType((*AcceptedTransaction)(nil), "pb.AcceptedTransaction")
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor_2cc4e03d2c28c490) }

var fileDescriptor_2cc4e03d2c28c490 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x5f, 0x6b, 0xb3, 0x30,
	0x14, 0xc6, 0x5f, 0xad, 0xed, 0xbb, 0x1e, 0xa5, 0xd3, 0xb3, 0x5d, 0x08, 0x1b, 0x4c, 0x7a, 0x25,
	0x83, 0xed, 0x66, 0x9f, 0xa0, 0x58, 0x0b, 0xdd, 0x98, 0x8e, 0x34, 0x65, 0xbd, 0x93, 0x34, 0x86,
	0x2e, 0x50, 0xa2, 0x68, 0xfa, 0x91, 0xf6, 0x3d, 0x87, 0x7f, 0x4a, 0xdd, 0xee, 0xf2, 0xfc, 0x92,
	0xf3, 0x9c, 0xe7, 0x21, 0xe0, 0xe9, 0x8a, 0xa9, 0x9a, 0x71, 0x2d, 0x0b, 0xf5, 0x5c, 0x56, 0x85,
	0x2e, 0xd0, 0x2c, 0xf7, 0xf3, 0x6f, 0x03, 0x6c, 0x7a, 0xb9, 0xc1, 0x07, 0xb0, 0x79, 0xa1, 0x74,
	0xc5, 0xb8, 0xce, 0x64, 0xee, 0x1b, 0x81, 0x11, 0x3a, 0x04, 0xce, 0x68, 0x9d, 0xa3, 0x0f, 0xff,
	0xf9, 0x17, 0x53, 0x4a, 0x1c, 0x7d, 0x33, 0x30, 0xc2, 0x29, 0x39, 0x4b, 0xbc, 0x83, 0x69, 0x2d,
	0x54, 0x2e, 0xaa, 0x66, 0x70, 0xd4, 0x0e, 0x5e, 0x75, 0x60, 0x9d, 0xe3, 0x2d, 0x8c, 0x55, 0xa1,
	0xb8, 0xf0, 0xad, 0xc0, 0x08, 0x2d, 0xd2, 0x09, 0x44, 0xb0, 0x38, 0x3b, 0x1e, 0xfd, 0x71, 0xeb,
	0xd4, 0x9e, 0x9b, 0x97, 0x52, 0x95, 0x27, 0xed, 0x4f, 0x82, 0x51, 0xe8, 0x90, 0x4e, 0xcc, 0x37,
	0xe0, 0x6d, 0xe4, 0x41, 0x89, 0x7c, 0x18, 0x36, 0x00, 0x7b, 0xd0, 0xaa, 0x0f, 0x3b, 0x44, 0x78,
	0x0f, 0xd3, 0x5a, 0x1e, 0x14, 0xd3, 0xa7, 0x4a, 0xb4, 0x79, 0x1d, 0x72, 0x01, 0x73, 0x0a, 0x37,
	0x0b, 0xce, 0x45, 0xa9, 0x7f, 0xdb, 0xce, 0xc0, 0xec, 0xab, 0x5b, 0xc4, 0x94, 0x39, 0x3e, 0x01,
	0xd6, 0xed, 0xee, 0x6c, 0xb8, 0xad, 0x73, 0xf3, 0xea, 0xbf, 0xa9, 0x1e, 0x25, 0x78, 0x03, 0xb9,
	0xd1, 0x4c, 0x9f, 0x6a, 0x9c, 0x01, 0xd0, 0x5d, 0xb6, 0x4d, 0xde, 0x92, 0xf4, 0x33, 0x71, 0xff,
	0xe1, 0x35, 0xd8, 0x74, 0x97, 0x2d, 0xa2, 0x28, 0xfe, 0xa0, 0xf1, 0xd2, 0x35, 0x7a, 0x40, 0xe2,
	0xd7, 0x38, 0x6a, 0x80, 0x89, 0x2e, 0x38, 0x74, 0x97, 0x45, 0x69, 0xb2, 0x5a, 0x93, 0xf7, 0x78,
	0xe9, 0x8e, 0x7a, 0x92, 0xa4, 0x34, 0x5b, 0xa5, 0xdb, 0x64, 0xe9, 0x5a, 0xfb, 0x49, 0xfb, 0x91,
	0x2f, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x01, 0x31, 0x37, 0xdd, 0x01, 0x00, 0x00,
}
