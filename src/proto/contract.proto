syntax = "proto3";

package pb;

// Basic information describing a contract that can be executed against.
message Contract {

  // Name of the contract. Doesn't need to be unique, just used for convenience.
  string name = 1;

  // Bytes array representing the id of the owner, this also happens
  // to be the owner's account public key.
  bytes owner_id = 2;

  // Web assembly bytes of the contract to be deployed.
  bytes wasm_bytes = 3;

}

// Contract signed by the owner. Used to verify owner during deployment.
message SignedContract {

  // Raw contract bytes serialized. Should be in the format of a Contract
  // message.
  bytes contract = 1;

  // Hexidecimal signature of the contract bytes signed by the contract owner's
  // private key.
  bytes signature = 2;
}

// A contract that a node has accepted, assigned an ID to, and is attempting
// to deploy to the rest of the blockchain.
message AcceptedContract {

  // Unique identifier for the contract, should be a public key using the same
  // signing scheme as accounts.
  bytes contract_id = 1;

  // These are the raw bytes received from the original request to process a
  // contract. Although nodes read and inspect contract,  they  don't
  // reseralize them after assigning a contract ID. This is to avoid
  // slight differences in serialization format from invalidating a signature.
  bytes signed_contract = 2;

}

enum ContractStatus {

  // The contract status is either not known or not set.
  CT_UNKNOWN = 0;

  // The contract has been accepted by a node and is in the process of being
  // submitted to the blockchain.
  CT_ACCEPTED = 1;

  // This contract was not accepted by the blockchain.
  CT_REJECTED = 2;

  // The contract has succesfully been added to the blockchain.
  CT_ACTIVE = 3;

  // The contract has been paused by the contract owner.
  CT_PAUSED = 4;

  // The contract has been deactivated by the contract owner.
  CT_DEACTIVATED = 5;

  // This contract does not have a status.
  CT_NOT_FOUND = 6;

}
